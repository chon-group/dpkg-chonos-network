#! /bin/sh
EmbedMAS_HOME=/opt/group.chon
EmbedMAS_TMP=/tmp/.embedMAS
EmbedMAS_LOGFILE=$EmbedMAS_TMP/embeddedMAS.log
mkdir -p $EmbedMAS_TMP


while getopts h:f:m:c:e:k:d:-: flag
do
    case "${flag}" in
        f) confFile=${OPTARG};;
        m) modeOperation=${OPTARG};;
        c) ch=${OPTARG};;
        e) name=${OPTARG};;
        k) key=${OPTARG};;
		d) driver=${OPTARG};;
        -) opt=${OPTARG};;
    esac
done


if [ "$opt" = "help" ]; then
	cat $EmbedMAS_HOME/docs/scripts/chonosWifiConf.txt
elif [ "$opt" = "forget" ]; then
	chonos-log -e "[chonos-nettest] Forgetting WLANs..."
	rm $EmbedMAS_HOME/conf/WLANs/lan_*.conf 2>/dev/null
	cp $EmbedMAS_HOME/conf/WLANs/base.conf /etc/wpa_supplicant/wpa_supplicant.conf
	 echo -n "{"
        echo -n " \"message\":\"Esquecer Redes\","
        echo -n "  \"success\":\"true\""
    echo  "}"

elif [ "$opt" = "list" ]; then
	qtd=`cat $EmbedMAS_HOME/conf/WLANs/lan_*.conf 2> /dev/null | grep "network=" | nl | tail -1 | xargs | cut -d " " -f 1`
	echo "[" > $EmbedMAS_TMP/json.out
		i=2
		while [ $i -le $((qtd+1)) ]; do
			essid=`cat $EmbedMAS_HOME/conf/WLANs/lan_*.conf | xargs | cut -d "{" -f $i | xargs | cut -d " " -f 1 | cut -d "=" -f 2`
			echo "{" >> $EmbedMAS_TMP/json.out
			echo "\"essid\": \"$essid\"," >> $EmbedMAS_TMP/json.out    
			key=`cat $EmbedMAS_HOME/conf/WLANs/lan_*.conf | xargs | cut -d "{" -f $i | xargs | cut -d " " -f 2 | cut -d "=" -f 2`
			echo "\"pass\": \"$key\"" >> $EmbedMAS_TMP/json.out
			
			if [ $i -le $((qtd)) ]; then
				echo "}," >> $EmbedMAS_TMP/json.out
			else
				echo "}" >> $EmbedMAS_TMP/json.out
			fi
			i=$((i+1))  
		done
	echo "]" >> $EmbedMAS_TMP/json.out
	cat $EmbedMAS_TMP/json.out
fi



macInterface=`cat $EmbedMAS_HOME/conf/wlanInterface.conf | cut -d ";" -f 2 | sed 's,:,-,g'`
if [ "$macInterface" = "00-00-00-00-00-00" ]
then
	chonos-log -e "[chonosWifiConf] Non existis a Wireless Interface!"
	exit 1
fi
wlanInterface=`cat $EmbedMAS_HOME/conf/wlanInterface.conf | cut -d ";" -f 1`

######################## Mode Operation #####################################
if [ "$modeOperation" = "ap" ]; then
	op1='random'
	op2="EmbeddedMAS($macInterface)"
	op3='NONE'

	if [ "$ch" != "" ]; then
		op1=$ch
	fi

	if [ "$name" != "" ]; then
		op2=$name
	fi

	if [ "$key" != "" ]; then
		op3=$key
	fi

	echo 1 > $EmbedMAS_HOME/conf/apMode.conf
	$EmbedMAS_HOME/bin/lan/wpa_file_generator.sh -c $op1 -e $op2 -k $op3

	echo -n "{" > $EmbedMAS_TMP/json.out
		echo  " \"message\":\"AP Mode ON\"," >> $EmbedMAS_TMP/json.out
		echo  "  \"essid\":\"$op2\"," >> $EmbedMAS_TMP/json.out
		echo  "  \"key\":\"$op3\"," >> $EmbedMAS_TMP/json.out
		echo -n "  \"success\":\"true\"" >> $EmbedMAS_TMP/json.out
	echo  "}" >> $EmbedMAS_TMP/json.out

	chonos-log -e "Agendando AP WLAN Reconfigure ..."
	cat $EmbedMAS_TMP/json.out >> $EmbedMAS_LOGFILE
	/usr/bin/chonos-task -t "/usr/bin/chonosWifiConf -f apmode"
	cat $EmbedMAS_TMP/json.out

	exit 0
elif [ "$modeOperation" = "default" ]; then
	$EmbedMAS_HOME/bin/lan/wpa_file_generator.sh

	chonos-log -e "[chonos-netmng] Agendando Default WLAN Reconfigure ..."
	if [ "$driver" = "wext" ]; then
		/usr/bin/chonos-task -t "/usr/bin/chonosWifiConf -f default -d wext"
	else
		/usr/bin/chonos-task -t "/usr/bin/chonosWifiConf -f default"
	fi
	exit 0
elif [ "$modeOperation" = "client" ]; then
	wpa_passphrase $name $key > $EmbedMAS_HOME/conf/WLANs/lan_$name.conf

	echo -n "{" > $EmbedMAS_TMP/json.out
        echo  " \"message\":\"Client Mode\"," >> $EmbedMAS_TMP/json.out
		echo  "  \"essid\":\"$name\"," >> $EmbedMAS_TMP/json.out
		echo  "  \"key\":\"$key\"," >> $EmbedMAS_TMP/json.out
        echo -n "  \"success\":\"true\"" >> $EmbedMAS_TMP/json.out
	echo  "}" >> $EmbedMAS_TMP/json.out

	chonos-log -e "[chonos-netmng] Agendando WLAN Reconfigure ..."
	cat $EmbedMAS_TMP/json.out >> $EmbedMAS_LOGFILE
	
	if [ "$opt" = "reboot" ]; then
		/usr/bin/chonos-task -t "/usr/sbin/reboot"
	else
		killall wpa_supplicant
		systemctl restart chonos-network &
	fi
	cat $EmbedMAS_TMP/json.out
	exit 0
fi

######################### WPA Conf ##########################################
if [ "$confFile" != "" ]; then
		ip addr del 192.168.168.1/28 dev $wlanInterface >> /dev/null 2>> /dev/null
		systemctl stop dnsmasq
		systemctl stop isc-dhcp-server
		systemctl stop dhcpcd
		killall wpa_supplicant 
		rm /var/run/wpa_supplicant/*
		#systemctl stop wpa_supplicant
		systemctl stop networking

	if [ "$confFile" = "default" ]; then
  		confFile="$EmbedMAS_HOME/conf/WLANs/base.conf $EmbedMAS_HOME/conf/WLANs/lan_*.conf"
 		cat $confFile > /etc/wpa_supplicant/wpa_supplicant.conf
		systemctl start networking
		#systemctl start wpa_supplicant
		if [ "$driver" = "wext" ]; then
			chonos-log -e "[chonos-netmng] Tentando conectar na rede sem fio, utilizando o driver Wext"
			/sbin/wpa_supplicant -Dwext -i $wlanInterface -c /etc/wpa_supplicant/wpa_supplicant.conf &
		else
			chonos-log -e "[chonos-netmng] Tentando conectar na rede sem definir o driver"
			/sbin/wpa_supplicant -i $wlanInterface -c /etc/wpa_supplicant/wpa_supplicant.conf &
		fi
		sleep 10
		systemctl start dhcpcd
		systemctl start dnsmasq
		echo 0 > $EmbedMAS_HOME/conf/apMode.conf
		/usr/bin/chonos-task -t "/usr/bin/chonosDDNSManager --update"
  	elif [ "$confFile" = "apmode" ]; then
		echo 1 > $EmbedMAS_HOME/conf/apMode.conf
  		confFile="$EmbedMAS_HOME/conf/WLANs/base.conf $EmbedMAS_HOME/conf/WLANs/modeApZeroConf.conf"
 		cat $confFile > /etc/wpa_supplicant/wpa_supplicant.conf
		/sbin/wpa_supplicant -i $wlanInterface -c /etc/wpa_supplicant/wpa_supplicant.conf >> $EmbedMAS_LOGFILE 2>> $EmbedMAS_LOGFILE &
		sleep 5
		systemctl start networking
		#systemctl start wpa_supplicant
		systemctl start dhcpcd
		systemctl start isc-dhcp-server
		systemctl start dnsmasq
		chonos-log -e "[chonos-nettest] AP Mode Configured!"
 	fi
	
fi